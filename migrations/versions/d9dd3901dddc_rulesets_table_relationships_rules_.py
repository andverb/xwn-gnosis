"""rulesets table, relationships, rules inheritance

Revision ID: d9dd3901dddc
Revises: 01886ad3430e
Create Date: 2025-09-22 15:09:28.538357

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "d9dd3901dddc"
down_revision: str | Sequence[str] | None = "01886ad3430e"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "rulesets",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column("slug", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("base_ruleset_id", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=True),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=True),
        sa.Column("created_by", sa.String(length=150), nullable=False),
        sa.Column("last_update_by", sa.String(length=150), nullable=False),
        sa.ForeignKeyConstraint(
            ["base_ruleset_id"],
            ["rulesets.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column("rules", sa.Column("slug", sa.String(length=100), nullable=False))
    op.add_column("rules", sa.Column("changes_description", sa.Text(), nullable=True))
    op.add_column("rules", sa.Column("is_official", sa.Boolean(), nullable=True))
    op.add_column("rules", sa.Column("ruleset_id", sa.Integer(), nullable=False))
    op.add_column("rules", sa.Column("base_rule_id", sa.Integer(), nullable=True))
    op.add_column("rules", sa.Column("created_by", sa.String(length=150), nullable=False))
    op.add_column("rules", sa.Column("last_update_by", sa.String(length=150), nullable=False))
    op.create_foreign_key(None, "rules", "rulesets", ["ruleset_id"], ["id"])
    op.create_foreign_key(None, "rules", "rules", ["base_rule_id"], ["id"])
    op.drop_column("rules", "rule_set")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("rules", sa.Column("rule_set", sa.VARCHAR(length=50), nullable=False))
    op.drop_constraint(None, "rules", type_="foreignkey")
    op.drop_constraint(None, "rules", type_="foreignkey")
    op.drop_column("rules", "last_update_by")
    op.drop_column("rules", "created_by")
    op.drop_column("rules", "base_rule_id")
    op.drop_column("rules", "ruleset_id")
    op.drop_column("rules", "is_official")
    op.drop_column("rules", "changes_description")
    op.drop_column("rules", "slug")
    op.drop_table("rulesets")
    # ### end Alembic commands ###
